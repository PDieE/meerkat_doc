import{_ as a,o as s,c as e,O as l}from"./chunks/framework.ed3fd7ea.js";const m=JSON.parse('{"title":"企赋云前端项目规范","description":"","frontmatter":{},"headers":[],"relativePath":"guide/develop-rules.md","filePath":"guide/develop-rules.md","lastUpdated":1682481766000}'),o={name:"guide/develop-rules.md"},n=l(`<h1 id="企赋云前端项目规范" tabindex="-1">企赋云前端项目规范 <a class="header-anchor" href="#企赋云前端项目规范" aria-label="Permalink to &quot;企赋云前端项目规范&quot;">​</a></h1><p>为了维护项目的代码质量，项目中内置了格式化代码的工具 <code>Prettier</code> 和代码检测质量检查工具 <code>ESlint</code>。</p><h1 id="开发规范" tabindex="-1">开发规范 <a class="header-anchor" href="#开发规范" aria-label="Permalink to &quot;开发规范&quot;">​</a></h1><p>为了维护项目的代码质量，项目中内置了格式化代码的工具 Prettier 和代码检测质量检查工具 ESlint。<br> 同时，也确保你在开发过程中遵循提交规范，以保持项目仓库的分支、提交信息的清晰整洁。</p><h2 id="包管理器" tabindex="-1">包管理器 <a class="header-anchor" href="#包管理器" aria-label="Permalink to &quot;包管理器&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>禁止使用 <code>cnpm</code> 作为包管理工具</p></div><p>包管理器推荐优先级 pnpm &gt; yarn &gt; npm 如果依赖项安装缓慢可以切换镜像</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-A8bVj" id="tab-3N8BMpy" checked="checked"><label for="tab-3N8BMpy">pnpm</label><input type="radio" name="group-A8bVj" id="tab-PmeNG9e"><label for="tab-PmeNG9e">yarn</label><input type="radio" name="group-A8bVj" id="tab-uiXpm2G"><label for="tab-uiXpm2G">npm</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://registry.npmmirror.com</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://registry.npmmirror.com</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://registry.npmmirror.com</span></span></code></pre></div></div></div><h2 id="代码编写规范" tabindex="-1">代码编写规范 <a class="header-anchor" href="#代码编写规范" aria-label="Permalink to &quot;代码编写规范&quot;">​</a></h2><p>项目内已经内置了符合本公司规范的 <a href="https://prettier.io" target="_blank" rel="noreferrer">Prettier</a> 和 <a href="https://eslint.org" target="_blank" rel="noreferrer">ESlint</a> 配置及相关功能 执行以下指令，会进行问题的检查及修复，在 <code>pre-commit</code> 的 <code>git hook</code> 中，项目也内置了检查指令，帮助你在提交代码前发现问题</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-dfaVo" id="tab-GbrqyR0" checked="checked"><label for="tab-GbrqyR0">pnpm</label><input type="radio" name="group-dfaVo" id="tab-Kdwe3yH"><label for="tab-Kdwe3yH">yarn</label><input type="radio" name="group-dfaVo" id="tab-BPTjjf2"><label for="tab-BPTjjf2">npm</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 代码检查</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 自动修复问题</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint:fix</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 代码检查</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 自动修复问题</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint:fix</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 代码检查</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 自动修复问题</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint:fix</span></span></code></pre></div></div></div><h2 id="换行" tabindex="-1">换行 <a class="header-anchor" href="#换行" aria-label="Permalink to &quot;换行&quot;">​</a></h2><p>换行符全部采用LF 对于 <code>windows</code> 系统 必须要使用以下命令关闭 <code>git</code> 自动换行符转换</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">core.autocrlf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span></code></pre></div><h2 id="目录的命名规范" tabindex="-1">目录的命名规范 <a class="header-anchor" href="#目录的命名规范" aria-label="Permalink to &quot;目录的命名规范&quot;">​</a></h2><p>目录名全部使用小写，单词需采用复数形式，<code>kebab-case</code> 形式命名，如果需要有多个单词表达，使用中划线连接。如 <code>new-page</code>、<code>components</code></p><h2 id="文件的命名规范" tabindex="-1">文件的命名规范 <a class="header-anchor" href="#文件的命名规范" aria-label="Permalink to &quot;文件的命名规范&quot;">​</a></h2><p>文件的命名规范按照不同情况进行命名</p><ol><li>如果该文件是单文件组件/类，采用 <code>PascalCase</code> 形式命名，方便导入和使用。如 <code>StaffSelect.vue</code></li><li>如果该文件是目录下的主文件，采用 <code>index</code> 名称命名，方便导入。如 <code>index.vue</code></li><li>如果该文件是接口定义文件，采用 <code>camelCase</code> 形式命名，方便区分文件关联性。如 <code>system.ts</code> 和 <code>systemModel.ts</code></li><li>如果该文件是资源/样式文件，采用 <code>kebab-case</code> 形式命名。</li></ol><h2 id="类、接口、方法、变量等命名规范" tabindex="-1">类、接口、方法、变量等命名规范 <a class="header-anchor" href="#类、接口、方法、变量等命名规范" aria-label="Permalink to &quot;类、接口、方法、变量等命名规范&quot;">​</a></h2><ol><li>类名、接口名采用 <code>PascalCase</code> 形式命名，如 <code>UserInfo</code></li><li>方法名、变量名采用 <code>camelCase</code> 形式命名，如 <code>userInfo</code></li><li><code>constants</code>文件夹内的常量或其他常量采用 <code>CONTRACT_TYPES</code> 形式命名</li></ol><h2 id="分支规范" tabindex="-1">分支规范 <a class="header-anchor" href="#分支规范" aria-label="Permalink to &quot;分支规范&quot;">​</a></h2><ul><li>主干分支 -- <code>master</code></li><li>功能分支 -- <code>feat/xxx</code></li><li>修复分支 -- <code>fix/xxx</code><code>master</code> 分支只接受通过 <code>Pull Request</code> 合入功能分支 为保证提交的记录干净整洁，其他分支合入之前需要先 <code>git rebase master</code> 分支</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果发生冲突解决后需要执行 <code>git add . &amp;&amp; git rebase --continue</code> 继续进行rebase</p></div><p>分支命名规则: <code>feat/20210401_功能名称</code> 一个分支只代表一个功能/页面/bugfix</p><h2 id="commit-规范" tabindex="-1">commit 规范 <a class="header-anchor" href="#commit-规范" aria-label="Permalink to &quot;commit 规范&quot;">​</a></h2><p>除特殊项目以外所有项目均使用 <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noreferrer">Conventional Commits</a> 规范作为 message 的格式。</p><ul><li>feat：新功能</li><li>fix：修补 bug</li><li>docs：文档类变动</li><li>style：样式</li><li>refactor：重构</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul>`,28),t=[n];function p(c,r,i,d,y,C){return s(),e("div",null,t)}const u=a(o,[["render",p]]);export{m as __pageData,u as default};
